const config = require('../config');
const { cmd, commands } = require('../command');

cmd({
  pattern: "help2",
  alias: ["mainmenu", "help2"],
  desc: "Interactive menu with categories",
  category: "main",
  react: "üßæ",
  filename: __filename
}, async (conn, mek, m, { from, pushname, reply }) => {
  try {
    const getGreeting = () => {
      const h = new Date().getHours();
      if (h >= 5 && h < 12) return "…¢·¥è·¥è·¥Ö ·¥ç·¥è Ä…¥…™…¥…¢ üåÖ";
      if (h >= 12 && h < 18) return "…¢·¥è·¥è·¥Ö ·¥ÄÍú∞·¥õ·¥á Ä…¥·¥è·¥è…¥ üåû";
      return "…¢·¥è·¥è·¥Ö ·¥á·¥†·¥á…¥…™…¥…¢ üåö";
    };

    const caption = `*‚îå‚îÄ‚îÄ‚óã*
*‚îÇ „Äé ·¥ç·¥á Ä·¥Ñ·¥á·¥Ö·¥ás „Äè*
*‚îî‚îÄ‚î¨‚óã*
*‚îå‚îÄ‚î§ ${getGreeting()}*
*‚îÇ  ‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ*
*‚îÇ‚óì ·¥ús·¥á Ä : ${pushname}*
*‚îÇ‚óì ·¥è·¥°…¥·¥á Ä : ${config.OWNER_NAME}*
*‚îÇ‚óì  ô·¥Ä…™ ü·¥á ès : ·¥ç·¥ú ü·¥õ…™ ·¥Ö·¥á·¥†…™·¥Ñ·¥á*
*‚îÇ‚óì ·¥õ è·¥ò·¥á : …¥·¥è·¥Ö·¥á·¥äs*
*‚îÇ‚óì ·¥Ö·¥á·¥† : ·¥ç·¥Ä Ä…™s·¥á ü*
*‚îÇ‚óì ·¥ç·¥è·¥Ö·¥á : ${config.MODE}*
*‚îÇ‚óì ·¥ò Ä·¥á“ì…™x :*„Äå ${config.PREFIX} „Äç
*‚îÇ‚óì ·¥†·¥á Äs…™·¥è…¥ : 1.0.0  ô·¥á·¥õ·¥Ä*
*‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ä∑*`;

    // Create interactive buttons
    const buttons = [
      {
        buttonId: "menu_action",
        buttonText: { displayText: "üìÇ ·¥Ñ·¥Ä·¥õ·¥á…¢·¥è Ä…™·¥ás" },
        type: 1 // Use type 1 for simple buttons
      },
      {
        buttonId: "owner_info",
        buttonText: { displayText: "üëë ·¥è·¥°…¥·¥á Ä" },
        type: 1
      }
    ];

    // Send the initial menu message
    const sentMsg = await conn.sendMessage(from, {
      image: { url: 'https://files.catbox.moe/roubzi.jpg' },
      caption: caption,
      buttons: buttons,
      footer: "·¥ç·¥Ä·¥Ö·¥á  ô è ·¥ç·¥Ä Ä…™s·¥á ü",
      headerType: 1
    }, { quoted: mek });

    // Store the message ID for reference
    const menuMessageId = sentMsg.key.id;

    // Button handler function
    const handleButtons = async (response) => {
      try {
        // Check if this is a response to our menu message
        if (response.key.remoteJid !== from) return;
        if (!response.message?.buttonsResponseMessage) return;
        if (response.message.buttonsResponseMessage.contextInfo?.stanzaId !== menuMessageId) return;

        const selectedButton = response.message.buttonsResponseMessage.selectedButtonId;

        if (selectedButton === "menu_action") {
          // Show category selection
          const categoryButtons = [
            { buttonId: "download_menu", buttonText: { displayText: "üì• ·¥Ö·¥è·¥°…¥ ü·¥è·¥Ä·¥Ö" }, type: 1 },
            { buttonId: "group_menu", buttonText: { displayText: "üë• …¢ Ä·¥è·¥ú·¥ò" }, type: 1 },
            { buttonId: "fun_menu", buttonText: { displayText: "üéÆ “ì·¥ú…¥" }, type: 1 },
            { buttonId: "owner_menu", buttonText: { displayText: "üëë ·¥è·¥°…¥·¥á Ä" }, type: 1 },
            { buttonId: "ai_menu", buttonText: { displayText: "ü§ñ ·¥Ä…™" }, type: 1 },
            { buttonId: "anime_menu", buttonText: { displayText: "üç• ·¥Ä…¥…™·¥ç·¥á" }, type: 1 }
          ];

          await conn.sendMessage(from, {
            text: "*üìÇ s·¥á ü·¥á·¥Ñ·¥õ ·¥Ä ·¥Ñ·¥Ä·¥õ·¥á…¢·¥è Ä è*",
            buttons: categoryButtons,
            footer: config.BOT_NAME,
            headerType: 1
          }, { quoted: response });
        }
        else if (selectedButton === "owner_info") {
          await conn.sendMessage(from, {
            text: `*üëë OWNER INFO*\n\nName: ${config.OWNER_NAME}\nContact: ${config.OWNER_NUMBER}`
          }, { quoted: response });
        }
        // Add more button handlers as needed
      } catch (error) {
        console.error("Button handler error:", error);
      }
    };

    // Listen for button responses
    conn.ev.on('messages.upsert', async ({ messages }) => {
      const msg = messages[0];
      if (msg?.message?.buttonsResponseMessage) {
        await handleButtons(msg);
      }
    });

  } catch (err) {
    console.error("‚ùå menu2 error:", err);
    reply("‚ö†Ô∏è Error showing menu.");
  }
});
